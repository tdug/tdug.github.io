{"version":3,"sources":["history.js","Components/NavLeft/index.js","Components/Home/index.js","Components/Root/router.js","Contexts/Theme/index.js","Components/NavTop/index.js","Components/Root/index.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","iOS","process","browser","test","navigator","userAgent","NavItem","path","text","icon","button","onClick","history","push","primary","useStyles","makeStyles","list","width","NavLeft","open","setOpen","classes","toggle","opened","event","onOpen","onClose","disableBackdropTransition","disableDiscovery","className","role","onKeyDown","Home","Container","Typography","variant","Router","exact","component","ThemeContext","createContext","baseTheme","createMuiTheme","darkBaseTheme","palette","type","ThemeProvider","children","useState","theme","setTheme","Provider","value","name","getTheme","CssBaseline","root","flexGrow","menuButton","marginRight","title","cursor","ThemeToggle","useContext","IconButton","NavTop","openNavLeft","AppBar","position","color","Toolbar","edge","aria-label","Menu","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","leftNavOpen","setLeftNavOpen","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAA,YAEeA,mB,iCCFf,kIAkBMC,EAAMC,EAAQC,SAAW,mBAAmBC,KAAKC,UAAUC,WAEjE,SAASC,EAAT,GAAsC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,KAC5B,OACE,kBAAC,IAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMC,IAAQC,KAAKN,KAC3C,kBAAC,IAAD,KAAeE,GACf,kBAAC,IAAD,CAAcK,QAASN,KAK7B,IAAMO,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OAII,SAASC,EAAT,GAAqC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAChCC,EAAUP,IACVQ,EAAS,SAAAC,GAAM,OAAI,SAAAC,GACvBJ,EAAQG,KAEV,OACE,kBAAC,IAAD,CACEJ,KAAMA,EACNM,OAAQH,GAAO,GACfI,QAASJ,GAAO,GAChBK,2BAA4B5B,EAC5B6B,iBAAkB7B,GAElB,yBACE8B,UAAWR,EAAQL,KACnBc,KAAK,eACLpB,QAASY,GAAO,GAChBS,UAAWT,GAAO,IAElB,kBAAC,IAAD,KACE,kBAACjB,EAAD,CACEE,KAAK,UACLC,KAAK,kBAAC,IAAD,MACLF,KAAK,oB,iLCvDF,SAAS0B,IACtB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,uBACA,kBAACD,EAAA,EAAD,0CCDS,SAASE,IACtB,OACE,kBAAC,IAAD,CAAazB,QAASA,KACpB,kBAAC,IAAD,CAAOL,KAAK,IAAI+B,OAAK,EAACC,UAAWN,K,sCCJjCO,EAAeC,wBAAc,CAAC,GAAI,eAElCC,EAAYC,YAAe,IAC3BC,EAAgBD,YAAe,CAACE,QAAS,CAACC,KAAM,UAEtD,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,SAAW,EACPC,mBAAS,QADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAYjC,OACE,kBAACX,EAAaY,SAAd,CAAuBC,MAAO,CAACH,EAAOC,IACpC,kBAAC,IAAD,CAAkBD,MAXL,SAAAI,GACf,OAAOA,GACP,IAAK,OACH,OAAOV,EACT,QACE,OAAOF,GAMkBa,CAASL,IAChC,kBAACM,EAAA,EAAD,MACCR,I,0DCdHjC,EAAYC,YAAW,CAC3ByC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAa,GAEfC,MAAO,CACLH,SAAU,EACVI,OAAQ,aAIZ,SAASC,IAAe,IAAD,EACKC,qBAAWxB,GADhB,mBACdU,EADc,KACPC,EADO,KAGrB,MAAc,SAAVD,EAEA,kBAACe,EAAA,EAAD,CAAYtD,QAAS,kBAAMwC,GAAS,SAAAD,GAAK,MAAI,YAC3C,kBAAC,IAAD,OAKF,kBAACe,EAAA,EAAD,CAAYtD,QAAS,kBAAMwC,GAAS,SAAAD,GAAK,MAAI,YAC3C,kBAAC,IAAD,OAMO,SAASgB,EAAT,GAAkC,IAAhBC,EAAe,EAAfA,YACzB7C,EAAUP,IAChB,OACE,yBAAKe,UAAWR,EAAQmC,MACtB,kBAACW,EAAA,EAAD,CAAQC,SAAS,QAAQC,MAAM,WAC7B,kBAACC,EAAA,EAAD,CAASnC,QAAQ,SACf,kBAAC6B,EAAA,EAAD,CACEnC,UAAWR,EAAQqC,WACnBa,KAAK,QACLF,MAAM,UACNG,aAAW,OACX9D,QAASwD,GAET,kBAACO,EAAA,EAAD,OAEF,kBAACvC,EAAA,EAAD,CACEC,QAAQ,KACRN,UAAWR,EAAQuC,MACnBlD,QAAS,kBAAMC,IAAQC,KAAK,OAH9B,QAOA,kBAACkD,EAAD,S,YCzDJhD,EAAYC,YAAW,CAC3ByC,KAAM,CACJkB,WAAY,UCEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBFSD,WACb,IAAM5D,EAAUP,IADa,EAESkC,oBAAS,GAFlB,mBAEtBkC,EAFsB,KAETC,EAFS,KAG7B,OACE,kBAAC,EAAD,KACE,yBAAKtD,UAAWR,EAAQmC,MACtB,kBAACS,EAAD,CAAQC,YAAa,kBAAMiB,GAAe,MAC1C,kBAACjE,EAAA,EAAD,CAASC,KAAM+D,EAAa9D,QAAS+D,IACrC,kBAAC/C,EAAD,UEjBQ,MAAUgD,SAASC,eAAe,SD8H5C,kBAAmBlF,WACrBA,UAAUmF,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6680bf82.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import React from \"react\";\nimport {\n  SwipeableDrawer,\n  Button,\n  List,\n  Divider,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from \"@material-ui/core\";\nimport {\n  Mail as MailIcon,\n  LibraryBooks as LibraryBooksIcon\n} from \"@material-ui/icons\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport history from \"../../history\";\n\nconst iOS = process.browser && /iP(?:ad|hone|od)/.test(navigator.userAgent);\n\nfunction NavItem({path, text, icon}) {\n  return (\n    <ListItem button onClick={() => history.push(path)}>\n      <ListItemIcon>{icon}</ListItemIcon>\n      <ListItemText primary={text} />\n    </ListItem>\n  );\n}\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250\n  }\n});\n\nexport default function NavLeft({ open, setOpen }) {\n  const classes = useStyles();\n  const toggle = opened => event => {\n    setOpen(opened);\n  }\n  return (\n    <SwipeableDrawer\n      open={open}\n      onOpen={toggle(true)}\n      onClose={toggle(false)}\n      disableBackdropTransition={!iOS}\n      disableDiscovery={iOS}\n    >\n      <div\n        className={classes.list}\n        role=\"presentation\"\n        onClick={toggle(false)}\n        onKeyDown={toggle(false)}\n      >\n        <List>\n          <NavItem\n            text=\"Contact\"\n            icon=<MailIcon />\n            path=\"#/contact\"\n          />\n        </List>\n      </div>\n    </SwipeableDrawer>\n  )\n}\n","import React from \"react\"\nimport { Container, Typography } from \"@material-ui/core\"\n\nexport default function Home() {\n  return (\n    <Container>\n      <Typography variant=\"h3\">Welcome to my site!</Typography>\n      <Typography>This site is under construction.</Typography>\n    </Container>\n  )\n}\n","import React from 'react';\nimport { HashRouter as ReactRouter, Route } from \"react-router-dom\";\nimport history from \"../../history\";\n\nimport Home from \"../Home\";\n\nexport default function Router() {\n  return (\n    <ReactRouter history={history}>\n      <Route path=\"/\" exact component={Home} />\n    </ReactRouter>\n  )\n}\n","import React, {createContext, useState } from \"react\";\nimport MuiThemeProvider from \"@material-ui/styles/ThemeProvider\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { createMuiTheme } from \"@material-ui/core/styles\"\n\nconst ThemeContext = createContext([{}, () => {}]);\n\nconst baseTheme = createMuiTheme({});\nconst darkBaseTheme = createMuiTheme({palette: {type: 'dark'}});\n\nfunction ThemeProvider({children}) {\n  const [theme, setTheme] = useState(\"dark\");\n\n  const getTheme = name => {\n    switch(name) {\n    case \"dark\":\n      return darkBaseTheme;\n    default:\n      return baseTheme;\n    }\n  }\n\n  return (\n    <ThemeContext.Provider value={[theme, setTheme]}>\n      <MuiThemeProvider theme={getTheme(theme)}>\n        <CssBaseline />\n        {children}\n      </MuiThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nexport {ThemeContext, ThemeProvider};\n","import React, { useContext } from \"react\";\nimport { AppBar, Toolbar, IconButton, Typography } from \"@material-ui/core\";\nimport {\n  Menu as MenuIcon,\n  Brightness4 as DarkThemeIcon,\n  Brightness5 as LightThemeIcon,\n} from \"@material-ui/icons\"\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport history from \"../../history\";\nimport { ThemeContext } from \"../../Contexts/Theme\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: 2\n  },\n  title: {\n    flexGrow: 1,\n    cursor: \"pointer\"\n  }\n});\n\nfunction ThemeToggle() {\n  const [theme, setTheme] = useContext(ThemeContext);\n\n  if (theme === \"base\") {\n    return (\n      <IconButton onClick={() => setTheme(theme => \"dark\")}>\n        <DarkThemeIcon />\n      </IconButton>\n    );\n  } else {\n    return (\n      <IconButton onClick={() => setTheme(theme => \"base\")}>\n        <LightThemeIcon />\n      </IconButton>\n    );\n  }\n}\n\nexport default function NavTop({ openNavLeft }) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" color=\"default\">\n        <Toolbar variant=\"dense\">\n          <IconButton\n            className={classes.menuButton}\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"Menu\"\n            onClick={openNavLeft}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            variant=\"h5\"\n            className={classes.title}\n            onClick={() => history.push(\"/\")}\n          >\n            tdug\n          </Typography>\n          <ThemeToggle />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Router from './router';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { ThemeProvider } from \"../../Contexts/Theme\";\nimport NavTop from \"../NavTop\";\nimport NavLeft from \"../NavLeft\";\n\nconst useStyles = makeStyles({\n  root: {\n    paddingTop: \"50px\"\n  }\n});\n\nexport default function Root() {\n  const classes = useStyles();\n  const [leftNavOpen, setLeftNavOpen] = useState(false);\n  return (\n    <ThemeProvider>\n      <div className={classes.root}>\n        <NavTop openNavLeft={() => setLeftNavOpen(true)} />\n        <NavLeft open={leftNavOpen} setOpen={setLeftNavOpen} />\n        <Router />\n        </div>\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Components/Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}